;Author: Mark Schmieg
;
(define (domain subExploration)
    (:requirements
        :strips
    )
    
    (:predicates
        (subResurface)
        (subDive)
        (OnBridge ?who)
        (subNotBeen ?x)
        (subRoute ?from ?to)
        (subAt ?x)
        
        (giantSquidLoc ?x)
        (giantSquid)
        (InEngineering ?who)
        (electrify ?x)
        (chargeEmpty ?x)
        (recharge ?x)
        
        (Artifact ?what)
        (HandEmpty)
        (Holding ?x)
        (InLab ?who)
        (ObjectInLab ?what)
        (Pic ?what)
        (DB ?which)
        (Report ?what)
        (TransferedToDB ?Type ?what ?which)
        (TargetLoc ?what ?where)
        (ArtLoc ?what ?where)
        (AuvInBay ?Type)
        (AuvLoc ?where)
        (InBay ?who)
        (ObjectInBay ?what)
        (picTransferToMem)
        (dataTransferToPort)
    )

(:action PersonelToBridge
    :parameters
        (?who)
    :effect
        (and
            (OnBridge ?who)
        )
)


(:action DiveSequence
    :precondition
        (and
            (OnBridge captain)
            (OnBridge navigator)
        )
    :effect
        (and
            (subDive)
        )
)

(:action ResurfaceSequence
    :precondition
        (and
            (OnBridge captain)
            (OnBridge navigator)
        )
    :effect
        (and
            (subResurface)
        )
)

(:action MoveTo
    :parameters
        (?from ?to)
    :precondition
        (and 
            (subDive)
            (OnBridge captain)
            (OnBridge navigator)
            (subNotBeen ?to)
            (subAt ?from)
          
        )
    :effect
        (and
            (subRoute ?from ?to)
            (not (subAt ?from))
            (not (subNotBeen ?to))
            (subAt ?to)
        )
)

(:action PersonelToLaunchBay
    :parameters
        (?who)
    :effect 
        (and
            (InBay ?who)      
        )
)

(:action LaunchAUV
    :parameters
        (?Type ?where)
    :precondition
        (and
            (subAt ?where)
            (not(giantSquidLoc ?where))
            (InBay engineer)
            (AuvInBay ?Type)
        )
    :effect
        (and    
            (not(AuvInBay ?Type))
            (AuvLoc ?where)
        )
)

(:action RetractAUV
    :parameters
        (?Type ?where)
    :precondition
        (and
            (not(AuvInBay ?Type))
            (AuvLoc ?where)
            (InBay engineer)
            (subAt ?where)
        )
    :effect
        (and 
            (AuvInBay ?Type)
        )
        
)


(:action TakePic
    :parameters
        (?where ?what)
    :precondition
        (and
            (not(AuvInBay InspecAuv))
            (AuvLoc ?where)
            (TargetLoc ?what ?where)
        )
    :effect
        (and
            (Pic ?what)
        )
)


(:action TransferPicToSub
    :parameters
        (?what ?which)
    :precondition
        (and
            (AuvInBay InspecAuv)
            (Pic ?what)
        )
    :effect
        (and
            (TransferedToDB Pic ?what ?which)
        )
)

(:action PickUpArtifact
    :parameters
        (?what ?where)
    :precondition
        (and 
            (not(AuvInBay ManAuv))
            (AuvLoc ?where)
            (ArtLoc ?what ?where)
            (HandEmpty)
        )
    :effect
        (and
            (not(HandEmpty))
            (Holding ?what)
        )
)

(:action UnloadArtifact
    :parameters
        (?what)
    :precondition
        (and
            (AuvInBay ManAuv)
            (Holding ?what)
            (not (ObjectInBay ?what))
            (not(HandEmpty))
        )
    :effect
        (and
            (ObjectInBay ?what)
            (HandEmpty)
        )
)

(:action GoToLab
    :parameters
        (?what)
    :precondition
        (and
            (InBay scientist)
            (ObjectInBay ?what)
        )
    :effect
        (and
            (InLab scientist)
            (ObjectInLab ?what)
        )
)

(:action MakeReport
    :parameters
        (?what)
    :precondition
        (and
            (InLab scientist)
            (ObjectInLab ?what)
        )
    :effect
        (and
            (Report ?what)
        )
)


(:action TransferReportToSub
    :parameters
        (?what ?which)
    :precondition
        (and
            (Report ?what )
        )
    :effect
        (and
            (TransferedToDB Report ?what ?which)
        )
)

)
