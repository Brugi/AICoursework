;Author: Mark Schmieg
;
(define (domain subExploration)
    (:requirements
        :strips :typing
    )
    
    (:types 
        Auv
        Personel 
        Documents
        Threat
        Location
        Treasures
        Database
        Room
    )
    (:predicates
        (Personel ?who)
        (Location ?x)
        (Auv ?Type)
        (Threat ?z)
        (Treasures ?what)
        (Database ?which)
        (Documents ?Type)
        (Room ?Room)
        
        (InRoom ?Room ?who)
        (SubResurface)
        (SubDive)
        (OnBridge ?who)
        (SubNotBeen ?x)
        (SubRoute ?from ?to)
        (SubAt ?x )
        (OrderGivenToMove ?fromWho ?ToWho ?from ?to)
        
        (GiantSquidLoc ?x )
        (InEngineering ?who )
        (ChargeEmpty)
        (SubImmobile)
        
        (Document ?Type  ?what )
        (Artifact ?what )
        (HandEmpty)
        (Holding ?x )
        (InLab ?who )
        (ObjectInLab ?what )
        (Pic ?what )
        (DB ?which )
        (Report ?what )
        (TransferedToDB ?Type  ?what ?which )
        (TargetLoc ?what ?where )
        (ArtLoc ?what  ?where )
        (AuvInBay ?Type )
        (AuvDestroyed)
        (AuvLoc ?where )
        (InBay ?who )
        (ObjectInBay ?what )
        
       
    )
    
;Moves personel to a specific room in the sub.
(:action PersonelToRoom
    :parameters
        (?who - Personel ?Room - Room)
    :effect
        (and
            (InRoom ?Room ?who)
        )
)

;Makes the sub submerged.
(:action DiveSequence
    :precondition
        (and
            (InRoom Bridge Captain)
            (InRoom Bridge Navigator)
            (SubResurface)
            (not(SubDive))
        )
    :effect
        (and
            (SubDive)
            (not (SubResurface))
        )
)

;Makes the sub resurfaced.
(:action ResurfaceSequence
    :precondition
        (and
            (InRoom Bridge Captain)
            (InRoom Bridge Navigator)
            (SubDive)
            (not(SubResurface))
        )
    :effect
        (and
            (SubResurface)
            (not(SubDive))
        )
)

(:action GiveOrder
    :parameters
        (?from - Location ?to - Location)
    :precondition
        (and
            (InRoom Bridge Captain)
            (InRoom Bridge Navigator)
        )
    :effect 
        (OrderGivenToMove Captain Navigator ?from ?to)
)

;Moves the sub from one location to another.
(:action MoveTo
    :parameters
        (?from - Location ?to - Location)
    :precondition
        (and 
            (OrderGivenToMove Captain Navigator ?from ?to )
            (SubDive)
            (InRoom Bridge Captain)
            (InRoom Bridge Navigator)
            (SubNotBeen ?to )
            (SubAt ?from)
            (not(SubImmobile))
            (not(ChargeEmpty))
          
        )
    :effect
        (and
            (SubRoute ?from  ?to )
            (not (SubAt ?from ))
            (not (SubNotBeen ?to ))
            (SubAt ?to )
        )
)



;Launches any type of AUV, it will launch the correct AUV according to the 
;mission objective. It will not launch if a squid is in the same location as the 
;sub.
(:action LaunchAUV
    :parameters
        (?Type - Auv ?where - Location)
    :precondition
        (and
            (SubAt ?where)
            (not(GiantSquidLoc ?where))
            (InRoom Bay Engineer)
            (AuvInBay ?Type)
            (SubDive)
            
        )
    :effect
        (and    
            (not(AuvInBay ?Type))
            (AuvLoc ?where)
        )
)

;Retracts the any type of AUV back into the launch bay.
(:action RetractAUV
    :parameters
        (?Type - Auv ?where - Location)
    :precondition
        (and
            (not(AuvInBay ?Type))
            (AuvLoc ?where)
            (InRoom Bay Engineer)
            (SubAt ?where)
            (SubDive)
        )
    :effect
        (and 
            (AuvInBay ?Type)
        )
        
)

;Action of Inspection AUV taking a picture of a target. 
(:action TakePic
    :parameters
        (?where - Location ?what - Treasures)
    :precondition
        (and
            (not(AuvInBay InspecAuv))
            (AuvInBay ManAuv)
            (AuvLoc ?where)
            (TargetLoc ?what ?where)
            (SubAt ?where)
            (not (AuvDestroyed))
        )
    :effect
        (and
            (Pic ?what)
        )
)

;Transfers the pictures captured to the sub's database.
(:action TransferPicToSub
    :parameters
        (?what - Treasures)
    :precondition
        (and
            (AuvInBay InspecAuv)
            (InRoom Bay Engineer)
            (Pic ?what )
        )
    :effect
        (and
            (TransferedToDB Pic ?what SubDB)
        )
)
;;
;(:action TransferPicToSub
;   :parameters
;       (?what ?Type )
;   :precondition
;        (or
;            (when (Document Pic ?what)
;                (and (AuvInBay InspecAuv) (Pic ?what))
;            )
;            (when (Document Report ?what)
;                (and (Report ?what))
;            )
;        )
;    :effect
;        (and
;            (TransferedToDB ?Type ?what SubDB)
;        )
;)

;Action of the manipulation AUV picking up an artifact.
(:action PickUpArtifact
    :parameters
        (?what - Treasures ?where - Location)
    :precondition
        (and 
            (not(AuvInBay ManAuv))
            (AuvInBay InspecAuv)
            (AuvLoc ?where)
            (ArtLoc ?what ?where)
            (HandEmpty)
            (SubAt ?where)
            (not (AuvDestroyed))
            
        )
    :effect
        (and
            (not(HandEmpty))
            (Holding ?what)
        )
)

;Unlading the collected artifact from the manipulation AUV.
(:action UnloadArtifact
    :parameters
        (?what - Treasures)
    :precondition
        (and
            (AuvInBay ManAuv)
            (Holding ?what)
            (InRoom Bay Engineer)
            (not (ObjectInBay ?what))
            (not(HandEmpty))
        )
    :effect
        (and
            (ObjectInBay ?what)
            (HandEmpty)
        )
)

;Scientist bringing the artifact into the lab for examination.
(:action GoToLab
    :parameters
        (?what -Treasures)
    :precondition
        (and
            (InRoom Bay Scientist)
            (ObjectInBay ?what)
        )
    :effect
        (and
            (InRoom Lab scientist)
            (ObjectInLab ?what)
        )
)

;Scientist makes a report of the artifact.
(:action MakeReport
    :parameters
        (?what - Treasures)
    :precondition
        (and
            (InRoom Lab Scientist)
            (ObjectInLab ?what)
        )
    :effect
        (and
            (Report ?what)
        )
)

;Transfer of the artifact report to the sub's database.
(:action TransferReportToSub
    :parameters
        (?what -Treasures )
    :precondition
        (and
            (Report ?what )
        )
    :effect
        (and
            (TransferedToDB Report ?what SubDB)
        )
)


;Data transfer from the sub to the sea port.
(:action TransferToSeaPort
    :parameters
        (?what -Treasures ?Type - Documents)
    :precondition
        (and 
            (SubResurface)
            (InRoom Bridge ComOfficer)
            (TransferedToDB ?Type ?what SubDB)
            
        )
    :effect
        (and
            (TransferedToDB ?Type ?what SeaPortDB)
            
        )
)

(:action GiantSquidAttack
    :parameters
        (?where - Location)
    :precondition
        (and
            (SubAt ?where)
            (GiantSquidLoc ?where)
        )
    :effect 
        (and
            (SubImmobile)
        )
)

(:action SubDefenceSystemEngaged
    :parameters
        (?where - Location)
    :precondition
        (and
            (SubAt ?where)
            (GiantSquidLoc ?where)
            (SubImmobile)
            (not (ChargeEmpty))
            (InRoom Engineering Engineer)
        )
    :effect
        (and
            (not (GiantSquidLoc ?where))
            (ChargeEmpty)
        )
)

(:action ReloadAndSubFix
    :precondition
        (and
            (SubImmobile)
            (ChargeEmpty)
            (InRoom Engineering Mechanic)
            (InRoom Engineering Engineer)
        )
    :effect
        (and
            (not (ChargeEmpty))
            (not (SubImmobile))
        )
)

(:action SquidDestroyAUV
    :parameters 
        (?where -Location)
    :precondition
        (and 
            (GiantSquidLoc ?where)
            (SubAt ?where)
            (AuvLoc ?where)
            (not (AuvDestroyed))
        )
    :effect 
        (and
            (AuvDestroyed)
        )
)

)
